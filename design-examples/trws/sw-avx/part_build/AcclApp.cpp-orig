// See LICENSE for license details.

#include <x86intrin.h>

#include "AcclApp.h"
typedef unsigned long long UInt64;
#include "Config.h"
#include <cassert>

#include <string.h>
#include <iostream>

#ifdef USE_TBB
#include <tbb/parallel_for.h>
#include <tbb/blocked_range.h>
#include <tbb/tick_count.h>
#include <tbb/task_scheduler_init.h>
#endif

typedef union 
{
  __m128i m;
  char b[16];
  unsigned char ub[16];
} ub16vector;

typedef union
{
  __m128i m;
  short s[8];
  unsigned short us[8];
} us8vector;

typedef union
{
  __m128i m;
  int i[4];
  unsigned int ui[4];
} ui4vector;

static const ub16vector broadcast_mask = { .ub={ 0, 1, 0, 1,
                                                 0, 1, 0, 1,
                                                 0, 1, 0, 1,
                                                 0, 1, 0, 1}};

  static const ub16vector shuffle_mask0 = { .ub={  0,  1, 128, 128,
                                                   4,  5, 128, 128,
                                                   8,  9, 128, 128,
                                                  12, 13, 128, 128}};

  static const ub16vector shuffle_mask1 = { .ub={  2,  3, 128, 128,
                                                   6,  7, 128, 128,
                                                  10, 11, 128, 128,
                                                  14, 15, 128, 128}};

  static const ub16vector shuffle_mask1a = { .ub={ 128, 128,  0,  1,
                                                   128, 128,  4,  5,
                                                   128, 128,  8,  9,
                                                   128, 128, 12, 13}};

static const unsigned short threshold = 204;
static const us8vector thresholdthreshold = { .us={ threshold, threshold,
                                                    threshold, threshold,
                                                    threshold, threshold,
                                                    threshold, threshold}};

const unsigned int maxCLperRow = 4;
const unsigned int log2ElementsPerCL = 5;
const unsigned int elementsPerCL = 1<<log2ElementsPerCL;
const unsigned int maxN = maxCLperRow<<log2ElementsPerCL;


class InnerBlockRange {
  const unsigned int n;
  const short *off;
  const Pair *slc_ptr;
  const unsigned short b;
  const unsigned short f;
  short *out;

public:
  InnerBlockRange( const unsigned int n_in,
		   const short *off_in,
		   const Pair *slc_ptr_in,
		   const unsigned short b_in,
		   const unsigned short f_in,
		   short *out_in) :
    n(n_in),
    off(off_in),
    slc_ptr(slc_ptr_in),
    b(b_in),
    f(f_in),
    out(out_in)
  {}

#ifdef USE_TBB
  void operator()( const tbb::blocked_range<unsigned int>& range) const {
    //    std::cout << range.begin() << "," << range.end() << std::endl;
    for( unsigned int ip=range.begin(); ip!=range.end(); ++ip) {
      InnerBlockRange *p = const_cast<InnerBlockRange*>( this);
      p->operator()( ip);      
    }
  }
#endif


#if 0
  void operator()( unsigned int j) {
    short best = 0;
    for( unsigned int i=0; i<n; ++i) {          
      unsigned int idx = n*i+j;
      unsigned int short a = slc_ptr[idx].a;
      unsigned int short e = slc_ptr[idx].e;
      short o = off[i];

      unsigned short mx = (e>f)?e:f;
      unsigned short ab = (a>b)?a-b:b-a;
      const unsigned short threshold = 204;
      unsigned short mn = (ab<threshold)?ab:threshold;
      short cand = o + (((unsigned int) mx*(unsigned int) mn)>>10);

      if ( i == 0 || (cand < best)) {
        best = cand;
      }
    }
    out[j] = best;

  }
#else
  void operator()( unsigned int j) {
    short best = 0;
    for( unsigned int i0=0; i0<n; i0+=8) {          

      us8vector aa, ee, cc, bb, ff, oo;


      oo.m = _mm_load_si128( reinterpret_cast<__m128i const*>( off+i0));

      for ( unsigned int i1=0; i1<8; ++i1) {
        unsigned int i = i0 + i1;
        unsigned int idx = n*i+j;
        unsigned int short a = slc_ptr[idx].a;
        unsigned int short e = slc_ptr[idx].e;
        
        aa.us[i1] = a;
        ee.us[i1] = e;
        bb.us[i1] = b;
        ff.us[i1] = f;
      }

      us8vector mxmx, abab, mnmn;
      mxmx.m = _mm_max_epu16( ee.m, ff.m);
      abab.m = _mm_abs_epi16( _mm_sub_epi16( aa.m, bb.m));
      mnmn.m = _mm_min_epi16( abab.m, thresholdthreshold.m);


      ui4vector mxmx0, mxmx1;
      mxmx0.m = _mm_shuffle_epi8( mxmx.m, shuffle_mask0.m);
      mxmx1.m = _mm_shuffle_epi8( mxmx.m, shuffle_mask1.m);

      ui4vector mnmn0, mnmn1;
      mnmn0.m = _mm_shuffle_epi8( mnmn.m, shuffle_mask0.m);
      mnmn1.m = _mm_shuffle_epi8( mnmn.m, shuffle_mask1.m);

      ui4vector mul0, mul1;
      mul0.m = _mm_srli_epi32( _mm_mullo_epi16( mxmx0.m, mnmn0.m), 10);
      mul1.m = _mm_srli_epi32( _mm_mullo_epi16( mxmx1.m, mnmn1.m), 10);

      us8vector res;
      res.m = _mm_or_si128( _mm_shuffle_epi8( mul0.m, shuffle_mask0.m),
                            _mm_shuffle_epi8( mul1.m, shuffle_mask1a.m));


      cc.m = _mm_add_epi16( oo.m, res.m);

      for ( unsigned int i1=0; i1<8; ++i1) {
        unsigned int i = i0 + i1;
        short cand = cc.s[i1];
        if ( i == 0 || (cand < best)) {
          best = cand;
        }
      }
      out[j] = best;
    }
  }
#endif

};




class OuterBlockRange {

  unsigned int n, t, k0;

  const unsigned short *gamma;
  short *weights;
  const short unsigned *q;

  const Pair *lof_ptr;
  const Pair *slc_ptr;

  unsigned short *mo_ptr;

public:

  OuterBlockRange( unsigned int n_in,
		   unsigned int t_in,
		   unsigned int k0_in,
		   const unsigned short *gamma_in,
		   short *weights_in,
		   const short unsigned *q_in,
		   const Pair *lof_ptr_in,
		   const Pair *slc_ptr_in,
		   short unsigned *mo_ptr_in) :
    n(n_in),
    t(t_in),
    k0(k0_in),
    gamma(gamma_in),
    weights(weights_in),
    q(q_in),
    lof_ptr(lof_ptr_in),
    slc_ptr(slc_ptr_in),
    mo_ptr(mo_ptr_in)
  {}

#ifdef USE_TBB
  void operator()( const tbb::blocked_range<unsigned int>& range) const {
    //    std::cout << range.begin() << "," << range.end() << std::endl;
    for( unsigned int ip=range.begin(); ip!=range.end(); ++ip) {
      OuterBlockRange *p = const_cast<OuterBlockRange*>( this);
      p->operator()( ip);      
    }
  }
#endif

  void operator()( unsigned int s) {


        unsigned int kk = s-(t+1) + k0;
        short off[maxN];
        for( unsigned int j=0; j<n; ++j) {
          off[j] = ((gamma[s]*weights[t*maxN+j])>>10) - q[(kk%n)*maxN+j];
        }

        short out[maxN];
        unsigned short b = lof_ptr[kk].a;
        unsigned short f = lof_ptr[kk].e;

	InnerBlockRange ibr( n, off, slc_ptr, b, f, out);

	//#ifdef USE_TBB
#if 0
	tbb::parallel_for( tbb::blocked_range<unsigned int>( 0, n, 1), ibr);
#else
	for ( unsigned int j=0; j<n; ++j) {
	  ibr.operator()( j);
	}
#endif

        /* clamp */
        unsigned short res[maxN];
        {
          short best = 0;
          for( unsigned int j=0; j<n; ++j) {
            short cand = out[j];
            if ( j==0 || (cand < best)) {
              best = cand;
            }
          }
          for( unsigned int j=0; j<n; ++j) {
            res[j] = out[j] - best;
          }
        }

        for( unsigned int j=0; j<n; ++j) {
          weights[s*maxN+j] += res[j];
          mo_ptr[kk*n+j] = res[j];
        }


  }

};

void AcclApp::compute( const void *config_void_ptr, const unsigned int config_size) {
  const Config &config = *static_cast<const Config *>(config_void_ptr);

  const unsigned short* gi_ptr = config.getGiPtr();
  const short* wi_ptr = config.getWiPtr();
  const unsigned short* mi_ptr = config.getMiPtr();
  unsigned short* mo_ptr = config.getMoPtr();
  const Pair* slc_ptr = config.getSlcPtr();
  const Pair* lof_ptr = config.getLofPtr();


  const unsigned int nSlices = config.get_nSlices();
  const unsigned int nCLperRow = config.get_nCLperRow();
  const unsigned int n = nCLperRow<<log2ElementsPerCL;
    
  unsigned short gamma[maxN];
  for( unsigned int j=0; j<n; ++j) {
    gamma[j] = *gi_ptr++;
  }

  short weights[maxN*maxN];
  for( unsigned int i=0; i<n; ++i) {            
    for( unsigned int j=0; j<n; ++j) {
      weights[i*maxN+j] = *wi_ptr++;
    }
  }

  unsigned short q[maxN*maxN];

  {
    unsigned int k = 0;
    for ( unsigned int t=0; t<n; ++t) {
      unsigned int k0 = k;
      for ( unsigned int s=t+1; s<n; ++s) {
        for( unsigned int j=0; j<n; ++j) {
          q[(k%n)*maxN+j] = *mi_ptr; // delayed values
          weights[t*maxN+j] += *mi_ptr;
          ++mi_ptr;
        }
        ++k;
      }
      OuterBlockRange obr( n, t, k0, gamma, weights, q, lof_ptr, slc_ptr, mo_ptr);

#ifdef USE_TBB
      tbb::parallel_for( tbb::blocked_range<unsigned int>( t+1, n, 1), obr);
#else
      for ( unsigned int s=t+1; s<n; ++s) {
        obr.operator()( s);
      }
#endif
    }
    assert( k == n*(n-1)/2);

  }

  std::cout << "gi reads: " << gi_ptr - config.getGiPtr() << std::endl;
  std::cout << "wi reads: " << wi_ptr - config.getWiPtr() << std::endl;
  std::cout << "mi reads: " << mi_ptr - config.getMiPtr() << std::endl;

}
