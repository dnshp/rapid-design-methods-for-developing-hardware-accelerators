// See LICENSE for license details.

#include "AcclApp.h"
typedef unsigned long long UInt64;
#include "Config.h"
#include <cassert>

#include <string.h>
#include <iostream>

void AcclApp::compute( const void *config_void_ptr, const unsigned int config_size) {
  const Config &config = *static_cast<const Config *>(config_void_ptr);

  const unsigned short* gi_ptr = config.getGiPtr();
  const short* wi_ptr = config.getWiPtr();
  const unsigned short* mi_ptr = config.getMiPtr();
  unsigned short* mo_ptr = config.getMoPtr();
  const Pair* slc_ptr = config.getSlcPtr();
  const Pair* lof_ptr = config.getLofPtr();

  const unsigned int maxCLperRow = 4;
  const unsigned int log2ElementsPerCL = 5;
  const unsigned int elementsPerCL = 1<<log2ElementsPerCL;
  const unsigned int maxN = maxCLperRow<<log2ElementsPerCL;

  const unsigned int nSlices = config.get_nSlices();
  const unsigned int nCLperRow = config.get_nCLperRow();
  const unsigned int n = nCLperRow<<log2ElementsPerCL;
    
  unsigned short gamma[maxN];
  for( unsigned int j=0; j<n; ++j) {
    gamma[j] = *gi_ptr++;
  }

  short weights[maxN][maxN];
  for( unsigned int i=0; i<n; ++i) {            
    for( unsigned int j=0; j<n; ++j) {
      weights[i][j] = *wi_ptr++;
    }
  }

  unsigned short q[maxN][maxN];

  {
    unsigned int k = 0;
    for ( unsigned int t=0; t<n; ++t) {
      unsigned int k0 = k;
      for ( unsigned int s=t+1; s<n; ++s) {
        for( unsigned int j=0; j<n; ++j) {
          q[k%n][j] = *mi_ptr; // delayed values
          weights[t][j] += *mi_ptr;
          ++mi_ptr;
        }
        ++k;
      }
      for ( unsigned int s=t+1; s<n; ++s) {
        short off[maxN];
        for( unsigned int j=0; j<n; ++j) {
          off[j] = ((gamma[s]*weights[t][j])>>10) - q[k0%n][j];
        }

        short out[maxN];
        unsigned short b = lof_ptr[k0].a;
        unsigned short f = lof_ptr[k0].e;

        for( unsigned int j=0; j<n; ++j) {
          short best = 0;
          for( unsigned int i=0; i<n; ++i) {          
            unsigned int idx = n*i+j;
            unsigned int short a = slc_ptr[idx].a;
            unsigned int short e = slc_ptr[idx].e;
            short o = off[i];

            unsigned short mx = (e>f)?e:f;
            unsigned short ab = (a>b)?a-b:b-a;
            const unsigned short threshold = 204;
            unsigned short mn = (ab<threshold)?ab:threshold;
            short cand = o + (((unsigned int) mx*(unsigned int) mn)>>10);

            if ( i == 0 || (cand < best)) {
              best = cand;
            }
          }
          out[j] = best;
        }

        /* clamp */
        unsigned short res[maxN];
        {
          short best = 0;
          for( unsigned int j=0; j<n; ++j) {
            short cand = out[j];
            if ( j==0 || (cand < best)) {
              best = cand;
            }
          }
          for( unsigned int j=0; j<n; ++j) {
            res[j] = out[j] - best;
          }
        }

        for( unsigned int j=0; j<n; ++j) {
          weights[s][j] += res[j];
          *mo_ptr++ = res[j];
        }
        ++k0;
      }
      assert( k == k0);
    }
    assert( k == n*(n-1)/2);

  }

  std::cout << "gi reads: " << gi_ptr - config.getGiPtr() << std::endl;

  std::cout << "wi reads: " << wi_ptr - config.getWiPtr() << std::endl;
  std::cout << "mi reads: " << mi_ptr - config.getMiPtr() << std::endl;
  std::cout << "mo writes: " << mo_ptr - config.getMoPtr() << std::endl;

}
